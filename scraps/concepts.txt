# Aktywne

## Modelowanie

1. Korzyści
    1. Mniej błędów w kodzie
    1. Szybciej dostarczać rozwiązania
    1. Czytelniejszy kod, łatwiejszy do zmiany (odzwierciedlenie)
1. Uproszczenie
    1. Jak powinno się napisać talia kart w grze komputerowej?
    1. Laptop jako przycisk do papieru -> potrzeba nadaje cel
    1. Idę na urodziny przez sklep -> najkrótsza droga do celu
    1. Talia kart w RÓŻNYCH grach komputerowych się różni
        1. Bez zrozumienia problemu nie da się nic zrobić
1. Programowanie
    1. Case: merge lokalizacji 
        1. kompozyty (porażka) -> nie spełnia warunków brzegowych czasu
        1. iteracyjnie (sukces) -> znaczenie obiektu jest szersze niż sam obiekt
        1. Wyjaśnienie: PO CZYM POZNAM SUKCES?
        1. Wyjaśnienie: bez zrozumienia nie da się zrobić rozwiązania. Rozwiązanie jest w KONCEPCIE, nie w KODZIE.
    1. Case: fortyfikowanie Neo4j pod kątem pustych rzeczy w bazie danych:
        1. przy wyciąganiu (porażka) -> sztuczny kod, niepotrzebny
        1. przy kreacji obiektu (sukces) -> obiekt bez ID nie ma sensu
        1. Wyjaśnienie: ważna jest korzyść biznesowa i zrozumienie tego co piszemy
        1. Wyjaśnienie: musimy patrzeć nie na problem lokalnie, a globalnie
        1. MATS: https://www.youtube.com/watch?v=wf-BqAjZb8M (Hettinger)
1. Podsumowanie
    1. Uproszczenie wymaga zrozumienia tego co naprawdę robimy
    1. Dzięki zrozumieniu możemy rozwiązać PROBLEM a nie OBJAW problemu
    1. Dzięki uproszczeniu piszemu dużo mniej kodu
        

## Regexy

1. Odłamki (do złożenia)
    1. Regex jest stringiem. Można parametryzować. Odsuńcie regexy od devów.
        1. [Ll]okalizacje Ignore Case, #{1,2}
    1. Regex warto sobie rozpisać by zrozumieć
    1. Używaj prostszego regexa, nie złożonego. ## Kontynuacja ### Chronologiczna -> dwoma zrobisz.

## Drugi poziom Pareto

1. Odłamki
    1. generalista, specjalista
    1. największy przyrost na początku
    1. umiejętności wspomagające

# Wygaszone

1. Misja, wizja, strategia
    1. Korzyści
    1. Problem zamawiania pizzy (1 osoba a 10 osób)
        1. Problem koordynacji i zaspokojenia wszystkich
        1. Indywidualnie to nie kłopot, ale przy innych ludziach - tak
    1. Misja, wizja, strategia
        1. Misja jako wspólna idea jak zmienić świat
        1. Wizja jako wspólny obraz jak świat ma wyglądać jak wygramy
        1. Strategia jako sposób dojścia do misji
    1. Przykład
    1. Misja
        1. Zapewnia jądro wspólnych działań / interesów
    1. Wizja
        1. Zapewnia coś "namacalnego", jak zmieni się świat jak wygramy
    1. Strategia
        1. Jak chcemy sprawić, by wizja zaistniała
    1. Z perspektywy produktu
        1. Co TEN PRODUKT ma rozwiązać
        1. Jądro wspólnych działań / interesów
    1. Z perspektywy grupy
        1. Gdzie MY chcemy iść
        1. Jądro wspólnych działań / interesów
    1. Modelowanie ideału
    1. Misja a cel: misja-wizja-strategia vs po_co-co-jak_to_zrobimy

---

1. SEF + Structurelessness
    1. Materiały: 
        1. Mark Morgan, Raymond E. Levitt, William Malek "Skuteczne Wdrażanie Strategii" albo http://www.esi-intl.se/pmo2015/pdfs/aligning-organization-strategy.pdf
        1. http://www.jofreeman.com/joreen/tyranny.htm
        1. https://hintjens.gitbooks.io/social-architecture/content/
    1. Zakres:
        1. Przedstawienie góry SEF do poziomu Strategii
        1. Różne firmy inne rzeczy promują (wyjaśnienie Strzałek)
        1. A gdy nie ma struktury, kultura dominuje
        1. A gdy nie ma celu, co się dzieje z grupą?
        1. Budowanie grupy
        1. A więc jak zrobić "grupę" bez celu?
        1. Skala
            1. 1 osoba, 10 osób, 100 osób, 1000 osób
            1. dywizjony, macierzowa, promienista
            1. "chcemy zrobić komiks: 50 stron, 250 stron, 1000 stron, 1500 stron"

# Skończone

